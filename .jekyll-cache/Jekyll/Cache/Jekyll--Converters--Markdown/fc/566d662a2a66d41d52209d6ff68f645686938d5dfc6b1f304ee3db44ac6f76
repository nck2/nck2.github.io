I"W#<p>주피터 사용시 모델에 대한 정보는 Profile?? 와 같은 명령을 통해 알 수 있음.
주피터는 사용하는 모델을 자동으로 임포트함.</p>
<h2 id="조회retrieve">조회(Retrieve)</h2>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ModelCls</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="n">oredr_by</span><span class="p">(</span><span class="s">'-id'</span><span class="p">)[:</span><span class="mi">10</span><span class="p">]</span>
<span class="n">ModelCls</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">creat</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">"필수필드 모두 기재"</span><span class="p">)</span>
<span class="n">queryset</span><span class="o">=</span><span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">title__icontains</span><span class="o">=</span><span class="s">"포함된 텍스트"</span><span class="p">)</span></code></pre></figure>

<ul>
  <li>포함된 텍스트가 제목에 들어간 쿼리셋(i: 대소문자 구별 무시)</li>
</ul>

<h3 id="and-조건">And 조건</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">queryset</span><span class="o">=</span><span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">title__icontains</span><span class="o">=</span><span class="s">"포함된 텍스트"</span><span class="p">)</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">title__endswith</span><span class="o">=</span><span class="s">"끝문장"</span><span class="p">)</span></code></pre></figure>

<ul>
  <li>위조건에 추가여 끝문장으로 끝나는 제목을 가진 텍스트</li>
  <li>queryset=Post.objects.all().filter(title__icontains=”포함된 텍스트”,title__endswith=”끝문장”) : 같은 조건임</li>
</ul>

<p>Post.objects.all().filter(title__icontains=”포함된 텍스트”).exclude(title–endswith=”끝제외”)</p>
<ul>
  <li>포함된 텍스트로 시작하는 것중 끝제외로 끝나는 것을 제외한 쿼리셋</li>
</ul>

<h3 id="or-조건">Or 조건</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">django.db.models</span> <span class="kn">import</span> <span class="n">Q</span>
<span class="n">queryset</span><span class="o">=</span> <span class="n">ModelCls</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span>
<span class="n">queryset</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">Q</span><span class="p">(</span><span class="n">title__icontains</span><span class="o">=</span> <span class="s">'1'</span><span class="p">)</span> <span class="o">|</span> <span class="n">Q</span><span class="p">(</span><span class="n">title__endswith</span><span class="o">=</span><span class="s">'3'</span><span class="p">))</span></code></pre></figure>

<ul>
  <li>
    <p>위 과정에서 DB Access는 이루어지지 않음. 실제 print같은 명령이 있을 때 접근함.</p>
  </li>
  <li>
    <p>검색기능 구현</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># myapp/views.py
</span><span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
  <span class="n">qs</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="nb">all</span><span class="p">()</span>

  <span class="n">q</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'q'</span><span class="p">,</span><span class="s">''</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">q</span><span class="p">:</span>
    <span class="n">qs</span> <span class="o">=</span> <span class="n">qs</span><span class="o">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">title__icontains</span> <span class="o">=</span> <span class="n">q</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'blog/post_list.html'</span><span class="p">,{</span>
    <span class="s">'post_list'</span><span class="p">:</span><span class="n">qs</span><span class="p">,</span>
    <span class="s">'q'</span><span class="p">:</span> <span class="n">q</span><span class="p">,</span>
    <span class="p">})</span>

  <span class="c1">#templates/blog/post_list.html
</span>  <span class="o">&lt;</span><span class="n">form</span> <span class="n">action</span><span class="o">=</span><span class="s">""</span> <span class="n">methon</span><span class="o">=</span><span class="s">"get"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nb">input</span> <span class="nb">type</span><span class="o">=</span><span class="s">'text'</span> <span class="n">name</span><span class="o">=</span><span class="s">"q"</span>  <span class="n">value</span><span class="o">=</span><span class="s">""</span><span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nb">input</span> <span class="nb">type</span><span class="o">=</span><span class="s">"submit"</span> <span class="n">value</span><span class="o">=</span><span class="s">"검색"</span><span class="o">/&gt;</span>
  <span class="o">&lt;/</span><span class="n">form</span><span class="o">&gt;</span></code></pre></figure>

<ul>
  <li>데이터베이스에 정렬 조건 추가</li>
</ul>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
  <span class="c1">#### 필드정의
</span>  <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
    <span class="n">ordering</span> <span class="o">=</span><span class="p">[</span><span class="s">'-id'</span><span class="p">]</span>
    </code></pre></figure>

<p><a href="https://docs.djangoproject.com/en/1.11/ref/models/conditional-expressions/">데이터정렬관련 문서</a></p>

<h3 id="fetch">Fetch</h3>
<ul>
  <li>queryset.get(id=1)
    <ul>
      <li>해당조건이 1개가 아니면 예외발생</li>
    </ul>
  </li>
  <li>queryset.first() 또는 queryset.last()
    <ul>
      <li>조건에 맞는게 없어도 예외발생하지 않고 None을 리턴</li>
    </ul>
  </li>
</ul>

<h2 id="추가create">추가(Create)</h2>

<ol>
  <li>
    <p>Model instance의 save()를 이용
instance = Post(name=”hvo”, title=”create”) # 저장전
instance.save() # 비로소 저장됨</p>
  </li>
  <li>
    <p>Model Manager의 create 를 이용
Post.objects.create(name=”hvo”, title=”create”)</p>
    <ul>
      <li>추가된 쿼리셋 반환</li>
    </ul>
  </li>
</ol>

<h2 id="갱신update">갱신(Update)</h2>

<ol>
  <li>속성변경후 save()를 이용
post = Post.objects.get(id=1)
post.tags = “tag변경”
post.save()
    <ul>
      <li>다수 row에 대해 각각하면 성능저하 발생</li>
    </ul>
  </li>
  <li>QuerySet의 update 이용
queryset=Post.objects.all()
queryset.update(tag=”tag변경”)
    <ul>
      <li>변경된 개수를 리턴함.</li>
      <li>다수의 변경을 하나의 SQL로 전달함.</li>
    </ul>
  </li>
</ol>

<h2 id="삭제delete">삭제(Delete)</h2>
<ol>
  <li>
    <p>instance에 delete 호출
post = Post.objects.get(id=1)
post.delete</p>
  </li>
  <li>
    <p>QuerySet의 delete함수를 호출
queryset = Post.objects.all()
queryset.delete()</p>
  </li>
</ol>

<h3 id="tip">Tip</h3>
<ul>
  <li>위의 경우를 살펴보면 1의 방법은 하나의 쿼리셋을 찾고 이에 대한 작업실시. 즉 여러개의 쿼리에 대해서는 for문을 이용하여 돌려야 하는데 이때 각각의 작업에 SQL이 작성되므로 성능저하됨.</li>
  <li>2의 방법이 훨씬 효율적임.</li>
  <li>요청반응속도는 대부분 DB에서 결정됨.</li>
</ul>
:ET